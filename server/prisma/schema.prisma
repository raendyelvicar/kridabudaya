// datasource and generator configuration
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Your chosen database
  url      = env("DATABASE_URL") // Use environment variable for the database URL
}

enum FileType {
  image
  video
  document
  audio
  other
}

enum MediaType {
  image
  video
  document
  audio
  other
}

// Enum to categorize different types of content
enum ContentType {
  hero_banner
  about
  services
  statistics
  clients
  testimonials
  team
  call_to_action
  faq
  location
  footer
}

// Enum for role of team members
enum RoleMember {
  coach
  assistant_coach
  active_member
  board_member
  alumni
  partner
}

model User {
  id            Int      @id @default(autoincrement())
  username      String   @unique
  password      String
  role_id       Int
  role          Role     @relation(fields: [role_id], references: [id])
  refresh_token String?
  last_login    DateTime @default(now())
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt // Automatically updates on modification

  @@map("users")
}

model Role {
  id                Int              @id @default(autoincrement())
  name              String           @unique
  users             User[]
  team_member_roles TeamMemberRole[]

  @@map("roles")
}

// Content model for storing dynamic landing page content
model Content {
  id           Int      @id @default(autoincrement()) // Primary key
  content_type String? // Type of content (hero_banner, about, etc.)
  title        String? // Title (for hero banner, about, etc.)
  subtitle     String? // Subtitle (for hero banner)
  description  String? // Description (for about, services, etc.)
  cta_text     String? // Call-to-action text (e.g., "Contact Us", "Learn More")
  created_at   DateTime @default(now()) // Timestamp for creation
  updated_at   DateTime @updatedAt // Automatically updates on modification

  @@map("contents") // This will map the model to the "content" table in the database
}

model ContentMapping {
  content_id         Int
  content_mapping_id Int
  content_type       ContentType

  @@id([content_id, content_mapping_id])
  @@map("content_mappings")
}

model Service {
  id             Int      @id @default(autoincrement()) // Primary key
  name           String // Service name
  description    String? // Service description
  service_fileid String? //Service file
  created_at     DateTime @default(now()) // Timestamp for creation
  updated_at     DateTime @updatedAt // Automatically updates on modification

  service FileStorage? @relation(fields: [service_fileid], references: [fileid])

  @@map("services")
}

model Banner {
  id            Int      @id @default(autoincrement()) // Primary key
  name          String // Banner name
  banner_fileid String // Foreign key to File model for the banner image
  created_at    DateTime @default(now()) // Timestamp for creation
  updated_at    DateTime @updatedAt // Automatically updates on modification

  banner_file FileStorage @relation(fields: [banner_fileid], references: [fileid])

  @@map("banners")
}

model FileStorage {
  fileid     String   @id @default(uuid()) // Primary key, using UUID as GUID
  file_type  String // Enum for file types (image, video, etc.)
  file_size  Int // Size in bytes
  file_name  String? // Name of the file (optional)
  file_key   String? // Key to get object on AWS S3 Bucket
  created_at DateTime @default(now()) // Timestamp for creation
  updated_at DateTime @updatedAt // Automatically updates on modification

  // Relationships
  team_members     TeamMember[] // Linked to TeamMember (profile picture)
  clients          KBClient[] // Linked to Client (logo)
  gallery_items    GalleryItem[] // Linked to GalleryItem
  portfolio_assets CatalogAsset[] // Linked to CatalogAsset
  banners          Banner[] // Linked to Banner (image)
  testimonials     Testimonial[] // Linked to Testimonial (profile picture)
  services         Service[] // Linked to Service (logo)
  social_medias    SocialMedia[]

  @@map("file_storages")
}

model TeamMember {
  id                     Int      @id @default(autoincrement()) // Primary key
  name                   String // Team member's name
  social_media_url       String? // Social media link
  phone_number           String? // Phone number
  bio                    String? // Bio of the team member
  profile_picture_fileid String? // Foreign key to File model for profile picture
  created_at             DateTime @default(now()) // Timestamp for creation
  updated_at             DateTime @updatedAt // Automatically updates on modification

  profile_picture  FileStorage?     @relation(fields: [profile_picture_fileid], references: [fileid])
  team_member_role TeamMemberRole[]

  @@map("team_members")
}

model TeamMemberRole {
  team_memberid Int
  role_id       Int

  team_member TeamMember? @relation(fields: [team_memberid], references: [id])
  role        Role?       @relation(fields: [role_id], references: [id])

  @@id([team_memberid, role_id])
  @@map("team_member_roles")
}

model KBClient {
  id            Int      @id @default(autoincrement()) // Primary key
  name          String // Client name
  logo_fileid   String? // Foreign key to File model for logo image
  description   String? // Description about the client
  website       String? // Client website
  contact_email String? // Contact email
  phone_number  String? // Contact phone number
  created_at    DateTime @default(now()) // Timestamp for creation
  updated_at    DateTime @updatedAt // Automatically updates on modification

  logo FileStorage? @relation(fields: [logo_fileid], references: [fileid])

  @@map("kb_clients")
}

model GalleryItem {
  id           Int      @id @default(autoincrement()) // Primary key
  title        String // Gallery item title
  description  String? // Description of the gallery item
  media_type   String? // Media type (image, video, etc.)
  media_fileid String? // Foreign key to File model
  created_at   DateTime @default(now()) // Timestamp for creation
  updated_at   DateTime @updatedAt // Automatically updates on modification

  media FileStorage? @relation(fields: [media_fileid], references: [fileid])

  @@map("gallery_items")
}

model Statistic {
  id         Int      @id @default(autoincrement()) // Primary key
  title      String // Statistic title (e.g., "500+ Clients")
  value      Int // Statistic value (e.g., 500)
  content_id Int // Foreign key to Content model
  created_at DateTime @default(now()) // Timestamp for creation
  updated_at DateTime @updatedAt // Automatically updates on modification

  @@map("statistics")
}

model Testimonial {
  id           Int      @id @default(autoincrement()) // Primary key
  name         String // Client name who provided testimonial
  image_fileid String? // Optional image URL for the client
  text         String // Testimonial text
  created_at   DateTime @default(now()) // Timestamp for creation
  updated_at   DateTime @updatedAt // Automatically updates on modification

  image FileStorage? @relation(fields: [image_fileid], references: [fileid])

  @@map("testimonials")
}

model FAQ {
  id         Int      @id @default(autoincrement()) // Primary key
  question   String // FAQ question
  answer     String // FAQ answer
  created_at DateTime @default(now()) // Timestamp for creation
  updated_at DateTime @updatedAt // Automatically updates on modification

  @@map("faqs")
}

model CatalogAsset {
  file_id    String // Foreign key to File model for portfolio file
  catalog_id Int // Foreign key to Portfolio model @unique

  file    FileStorage? @relation(fields: [file_id], references: [fileid])
  catalog Catalog?     @relation(fields: [catalog_id], references: [id])

  @@id([file_id, catalog_id])
  @@map("catalog_assets")
}

model Catalog {
  id             Int      @id @default(autoincrement()) // Primary key
  title          String // Portfolio title
  synopsis       String? // Brief description of the portfolio
  choreographer  String? // Choreographer name
  music_director String? // Music director name
  province_id    Int? // Foreign key to Province model
  created_at     DateTime @default(now()) // Timestamp for creation
  updated_at     DateTime @updatedAt // Automatically updates on modification

  province       Province?      @relation(fields: [province_id], references: [id])
  catalog_assets CatalogAsset[]

  @@map("catalogs")
}

model Province {
  id       Int       @id @default(autoincrement())
  name     String
  state    String
  catalogs Catalog[]

  @@map("provinces")
}

model SocialMedia {
  id          Int      @id @default(autoincrement())
  name        String
  url         String
  logo_fileid String?
  created_at  DateTime @default(now()) // Timestamp for creation
  updated_at  DateTime @updatedAt // Automatically updates on modification

  logo FileStorage? @relation(fields: [logo_fileid], references: [fileid])

  @@map("social_media")
}
